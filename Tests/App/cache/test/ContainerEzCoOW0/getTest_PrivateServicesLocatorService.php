<?php

use Symfony\Component\DependencyInjection\Argument\RewindableGenerator;
use Symfony\Component\DependencyInjection\Exception\RuntimeException;

// This file has been auto-generated by the Symfony Dependency Injection Component for internal use.
// Returns the public 'test.private_services_locator' shared service.

return $this->services['test.private_services_locator'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array('controller_name_converter' => function () {
    return ($this->privates['controller_name_converter'] ?? $this->privates['controller_name_converter'] = new \Symfony\Bundle\FrameworkBundle\Controller\ControllerNameParser(($this->services['kernel'] ?? $this->get('kernel', 1))));
}, 'controller_resolver' => function () {
    return ($this->privates['controller_resolver'] ?? $this->getControllerResolverService());
}, 'argument_metadata_factory' => function () {
    return ($this->privates['argument_metadata_factory'] ?? $this->privates['argument_metadata_factory'] = new \Symfony\Component\HttpKernel\ControllerMetadata\ArgumentMetadataFactory());
}, 'argument_resolver' => function () {
    return ($this->privates['argument_resolver'] ?? $this->getArgumentResolverService());
}, 'argument_resolver.request_attribute' => function () {
    return ($this->privates['argument_resolver.request_attribute'] ?? $this->privates['argument_resolver.request_attribute'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestAttributeValueResolver());
}, 'argument_resolver.request' => function () {
    return ($this->privates['argument_resolver.request'] ?? $this->privates['argument_resolver.request'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\RequestValueResolver());
}, 'argument_resolver.session' => function () {
    return ($this->privates['argument_resolver.session'] ?? $this->privates['argument_resolver.session'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\SessionValueResolver());
}, 'argument_resolver.service' => function () {
    return ($this->privates['argument_resolver.service'] ?? $this->load('getArgumentResolver_ServiceService.php'));
}, 'argument_resolver.default' => function () {
    return ($this->privates['argument_resolver.default'] ?? $this->privates['argument_resolver.default'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\DefaultValueResolver());
}, 'argument_resolver.variadic' => function () {
    return ($this->privates['argument_resolver.variadic'] ?? $this->privates['argument_resolver.variadic'] = new \Symfony\Component\HttpKernel\Controller\ArgumentResolver\VariadicValueResolver());
}, 'response_listener' => function () {
    return ($this->privates['response_listener'] ?? $this->privates['response_listener'] = new \Symfony\Component\HttpKernel\EventListener\ResponseListener('UTF-8'));
}, 'streamed_response_listener' => function () {
    return ($this->privates['streamed_response_listener'] ?? $this->privates['streamed_response_listener'] = new \Symfony\Component\HttpKernel\EventListener\StreamedResponseListener());
}, 'locale_listener' => function () {
    return ($this->privates['locale_listener'] ?? $this->getLocaleListenerService());
}, 'validate_request_listener' => function () {
    return ($this->privates['validate_request_listener'] ?? $this->privates['validate_request_listener'] = new \Symfony\Component\HttpKernel\EventListener\ValidateRequestListener());
}, 'resolve_controller_name_subscriber' => function () {
    return ($this->privates['resolve_controller_name_subscriber'] ?? $this->getResolveControllerNameSubscriberService());
}, 'parameter_bag' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'file_locator' => function () {
    return ($this->privates['file_locator'] ?? $this->privates['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->targetDirs[2].'/Resources'), array(0 => $this->targetDirs[2])));
}, 'config_cache_factory' => function () {
    return ($this->privates['config_cache_factory'] ?? $this->getConfigCacheFactoryService());
}, 'dependency_injection.config.container_parameters_resource_checker' => function () {
    return ($this->privates['dependency_injection.config.container_parameters_resource_checker'] ?? $this->privates['dependency_injection.config.container_parameters_resource_checker'] = new \Symfony\Component\DependencyInjection\Config\ContainerParametersResourceChecker($this));
}, 'config.resource.self_checking_resource_checker' => function () {
    return ($this->privates['config.resource.self_checking_resource_checker'] ?? $this->privates['config.resource.self_checking_resource_checker'] = new \Symfony\Component\Config\Resource\SelfCheckingResourceChecker());
}, 'cache.annotations' => function () {
    return ($this->privates['cache.annotations'] ?? $this->load('getCache_AnnotationsService.php'));
}, 'cache.default_clearer' => function () {
    return ($this->services['cache.app_clearer'] ?? $this->load('getCache_AppClearerService.php'));
}, 'test.client.history' => function () {
    return new \Symfony\Component\BrowserKit\History();
}, 'test.client.cookiejar' => function () {
    return new \Symfony\Component\BrowserKit\CookieJar();
}, 'test.session.listener' => function () {
    return ($this->privates['test.session.listener'] ?? $this->getTest_Session_ListenerService());
}, 'debug.debug_handlers_listener' => function () {
    return ($this->privates['debug.debug_handlers_listener'] ?? $this->getDebug_DebugHandlersListenerService());
}, 'debug.file_link_formatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL));
}, 'routing.resolver' => function () {
    return ($this->privates['routing.resolver'] ?? $this->load('getRouting_ResolverService.php'));
}, 'routing.loader.xml' => function () {
    return ($this->privates['routing.loader.xml'] ?? $this->load('getRouting_Loader_XmlService.php'));
}, 'routing.loader.yml' => function () {
    return ($this->privates['routing.loader.yml'] ?? $this->load('getRouting_Loader_YmlService.php'));
}, 'routing.loader.php' => function () {
    return ($this->privates['routing.loader.php'] ?? $this->load('getRouting_Loader_PhpService.php'));
}, 'routing.loader.glob' => function () {
    return ($this->privates['routing.loader.glob'] ?? $this->load('getRouting_Loader_GlobService.php'));
}, 'routing.loader.directory' => function () {
    return ($this->privates['routing.loader.directory'] ?? $this->load('getRouting_Loader_DirectoryService.php'));
}, 'routing.loader.service' => function () {
    return ($this->privates['routing.loader.service'] ?? $this->privates['routing.loader.service'] = new \Symfony\Component\Routing\Loader\DependencyInjection\ServiceRouterLoader($this));
}, 'router.default' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'router.request_context' => function () {
    return ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());
}, 'router.cache_warmer' => function () {
    return ($this->privates['router.cache_warmer'] ?? $this->load('getRouter_CacheWarmerService.php'));
}, 'router_listener' => function () {
    return ($this->privates['router_listener'] ?? $this->getRouterListenerService());
}, 'routing.loader.annotation' => function () {
    return ($this->privates['routing.loader.annotation'] ?? $this->load('getRouting_Loader_AnnotationService.php'));
}, 'routing.loader.annotation.directory' => function () {
    return ($this->privates['routing.loader.annotation.directory'] ?? $this->load('getRouting_Loader_Annotation_DirectoryService.php'));
}, 'routing.loader.annotation.file' => function () {
    return ($this->privates['routing.loader.annotation.file'] ?? $this->load('getRouting_Loader_Annotation_FileService.php'));
}, 'annotations.reader' => function () {
    return ($this->privates['annotations.reader'] ?? $this->load('getAnnotations_ReaderService.php'));
}, 'annotations.dummy_registry' => function () {
    return ($this->privates['annotations.dummy_registry'] ?? $this->load('getAnnotations_DummyRegistryService.php'));
}, 'annotations.cached_reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->load('getAnnotations_CachedReaderService.php'));
}, 'annotations.cache_warmer' => function () {
    return ($this->privates['annotations.cache_warmer'] ?? $this->load('getAnnotations_CacheWarmerService.php'));
}, 'annotations.cache' => function () {
    return ($this->privates['annotations.cache'] ?? $this->load('getAnnotations_CacheService.php'));
}, 'security.user_value_resolver' => function () {
    return ($this->privates['security.user_value_resolver'] ?? $this->load('getSecurity_UserValueResolverService.php'));
}, 'security.authentication.manager' => function () {
    return ($this->privates['security.authentication.manager'] ?? $this->getSecurity_Authentication_ManagerService());
}, 'security.authentication.trust_resolver' => function () {
    return ($this->privates['security.authentication.trust_resolver'] ?? $this->privates['security.authentication.trust_resolver'] = new \Symfony\Component\Security\Core\Authentication\AuthenticationTrustResolver('Symfony\\Component\\Security\\Core\\Authentication\\Token\\AnonymousToken', 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\RememberMeToken'));
}, 'security.encoder_factory.generic' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'security.user_password_encoder.generic' => function () {
    return ($this->services['security.password_encoder'] ?? $this->load('getSecurity_PasswordEncoderService.php'));
}, 'security.access.simple_role_voter' => function () {
    return ($this->privates['security.access.simple_role_voter'] ?? $this->privates['security.access.simple_role_voter'] = new \Symfony\Component\Security\Core\Authorization\Voter\RoleVoter());
}, 'security.access.authenticated_voter' => function () {
    return ($this->privates['security.access.authenticated_voter'] ?? $this->load('getSecurity_Access_AuthenticatedVoterService.php'));
}, 'security.firewall.map' => function () {
    return ($this->privates['security.firewall.map'] ?? $this->getSecurity_Firewall_MapService());
}, 'security.logout_url_generator' => function () {
    return ($this->privates['security.logout_url_generator'] ?? $this->getSecurity_LogoutUrlGeneratorService());
}, 'security.rememberme.response_listener' => function () {
    return ($this->privates['security.rememberme.response_listener'] ?? $this->privates['security.rememberme.response_listener'] = new \Symfony\Component\Security\Http\RememberMe\ResponseListener());
}, 'debug.security.access.decision_manager' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}, 'debug.security.firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'security.firewall.map.config.dev' => function () {
    return ($this->privates['security.firewall.map.config.dev'] ?? $this->load('getSecurity_Firewall_Map_Config_DevService.php'));
}, 'security.firewall.map.context.dev' => function () {
    return ($this->privates['security.firewall.map.context.dev'] ?? $this->load('getSecurity_Firewall_Map_Context_DevService.php'));
}, 'mabe_rate_limit.listener' => function () {
    return ($this->privates['mabe_rate_limit.listener'] ?? $this->getMabeRateLimit_ListenerService());
}, 'logger' => function () {
    return ($this->privates['logger'] ?? $this->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger());
}, 'debug.security.access.decision_manager.inner' => function () {
    return ($this->privates['debug.security.access.decision_manager.inner'] ?? $this->getDebug_Security_Access_DecisionManager_InnerService());
}, 'Psr\\Container\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\DependencyInjection\\ContainerInterface' => function () {
    return $this;
}, 'Symfony\\Component\\DependencyInjection\\ParameterBag\\ContainerBagInterface' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'Symfony\\Component\\DependencyInjection\\ParameterBag\\ParameterBagInterface' => function () {
    return ($this->privates['parameter_bag'] ?? $this->privates['parameter_bag'] = new \Symfony\Component\DependencyInjection\ParameterBag\ContainerBag($this));
}, 'Symfony\\Component\\EventDispatcher\\EventDispatcherInterface' => function () {
    return ($this->services['event_dispatcher'] ?? $this->getEventDispatcherService());
}, 'Symfony\\Component\\HttpKernel\\HttpKernelInterface' => function () {
    return ($this->services['http_kernel'] ?? $this->getHttpKernelService());
}, 'Symfony\\Component\\HttpFoundation\\RequestStack' => function () {
    return ($this->services['request_stack'] ?? $this->services['request_stack'] = new \Symfony\Component\HttpFoundation\RequestStack());
}, 'Symfony\\Component\\HttpKernel\\KernelInterface' => function () {
    return ($this->services['kernel'] ?? $this->get('kernel', 1));
}, 'Symfony\\Component\\Filesystem\\Filesystem' => function () {
    return ($this->services['filesystem'] ?? $this->services['filesystem'] = new \Symfony\Component\Filesystem\Filesystem());
}, 'Symfony\\Component\\HttpKernel\\Config\\FileLocator' => function () {
    return ($this->privates['file_locator'] ?? $this->privates['file_locator'] = new \Symfony\Component\HttpKernel\Config\FileLocator(($this->services['kernel'] ?? $this->get('kernel', 1)), ($this->targetDirs[2].'/Resources'), array(0 => $this->targetDirs[2])));
}, 'Psr\\Cache\\CacheItemPoolInterface' => function () {
    return ($this->services['cache.app'] ?? $this->load('getCache_AppService.php'));
}, 'Symfony\\Component\\Cache\\Adapter\\AdapterInterface' => function () {
    return ($this->services['cache.app'] ?? $this->load('getCache_AppService.php'));
}, 'Symfony\\Component\\HttpKernel\\Debug\\FileLinkFormatter' => function () {
    return ($this->privates['debug.file_link_formatter'] ?? $this->privates['debug.file_link_formatter'] = new \Symfony\Component\HttpKernel\Debug\FileLinkFormatter(NULL));
}, 'Symfony\\Component\\Routing\\RouterInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\Generator\\UrlGeneratorInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\Matcher\\UrlMatcherInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\RequestContextAwareInterface' => function () {
    return ($this->services['router'] ?? $this->getRouterService());
}, 'Symfony\\Component\\Routing\\RequestContext' => function () {
    return ($this->privates['router.request_context'] ?? $this->getRouter_RequestContextService());
}, 'annotation_reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->load('getAnnotations_CachedReaderService.php'));
}, 'Doctrine\\Common\\Annotations\\Reader' => function () {
    return ($this->privates['annotations.cached_reader'] ?? $this->load('getAnnotations_CachedReaderService.php'));
}, 'Symfony\\Component\\Security\\Core\\Authorization\\AuthorizationCheckerInterface' => function () {
    return ($this->services['security.authorization_checker'] ?? $this->getSecurity_AuthorizationCheckerService());
}, 'Symfony\\Component\\Security\\Core\\Authentication\\Token\\Storage\\TokenStorageInterface' => function () {
    return ($this->services['security.token_storage'] ?? $this->services['security.token_storage'] = new \Symfony\Component\Security\Core\Authentication\Token\Storage\TokenStorage());
}, 'Symfony\\Component\\Security\\Core\\Authentication\\AuthenticationManagerInterface' => function () {
    return ($this->privates['security.authentication.manager'] ?? $this->getSecurity_Authentication_ManagerService());
}, 'security.encoder_factory' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'Symfony\\Component\\Security\\Core\\Encoder\\EncoderFactoryInterface' => function () {
    return ($this->privates['security.encoder_factory.generic'] ?? $this->privates['security.encoder_factory.generic'] = new \Symfony\Component\Security\Core\Encoder\EncoderFactory(array()));
}, 'Symfony\\Component\\Security\\Core\\Encoder\\UserPasswordEncoderInterface' => function () {
    return ($this->services['security.password_encoder'] ?? $this->load('getSecurity_PasswordEncoderService.php'));
}, 'Symfony\\Component\\Security\\Http\\Authentication\\AuthenticationUtils' => function () {
    return ($this->services['security.authentication_utils'] ?? $this->load('getSecurity_AuthenticationUtilsService.php'));
}, 'Symfony\\Component\\Security\\Core\\Authorization\\AccessDecisionManagerInterface' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}, 'Symfony\\Component\\Security\\Http\\Firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'security.firewall' => function () {
    return ($this->privates['debug.security.firewall'] ?? $this->getDebug_Security_FirewallService());
}, 'argument_resolver.controller_locator' => function () {
    return ($this->privates['.service_locator.9_yeNH1'] ?? $this->privates['.service_locator.9_yeNH1'] = new \Symfony\Component\DependencyInjection\ServiceLocator(array()));
}, 'Psr\\Log\\LoggerInterface' => function () {
    return ($this->privates['logger'] ?? $this->privates['logger'] = new \Symfony\Component\HttpKernel\Log\Logger());
}, 'security.access.decision_manager' => function () {
    return ($this->privates['debug.security.access.decision_manager'] ?? $this->getDebug_Security_Access_DecisionManagerService());
}));
